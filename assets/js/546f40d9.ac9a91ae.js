"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[19849],{56908:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>g,frontMatter:()=>t,metadata:()=>s,toc:()=>d});var r=i(74848),o=i(28453);const t={},a="Migrate from mmap to WiredTiger Storage Engine",s={id:"setup-and-configure/environment-configuration/mongodb-configuration/migrate-from-mmap-to-wiredtiger-storage-engine",title:"Migrate from mmap to WiredTiger Storage Engine",description:"Starting with the major release 4.x of Rocket.Chat, MongoDB has to be set up with a WiredTiger storage engine rather than the deprecated mmapv1 one. This is mandatory, if you plan to upgrade to one of the future Rocket.Chat versions have to be prepared before initiating the application upgrade.",source:"@site/docs/setup-and-configure/environment-configuration/mongodb-configuration/migrate-from-mmap-to-wiredtiger-storage-engine.md",sourceDirName:"setup-and-configure/environment-configuration/mongodb-configuration",slug:"/setup-and-configure/environment-configuration/mongodb-configuration/migrate-from-mmap-to-wiredtiger-storage-engine",permalink:"/docs-exp/docs/setup-and-configure/environment-configuration/mongodb-configuration/migrate-from-mmap-to-wiredtiger-storage-engine",draft:!1,unlisted:!1,editUrl:"https://github.com/Freedom101/docs-exp/tree/main/my-website/docs/setup-and-configure/environment-configuration/mongodb-configuration/migrate-from-mmap-to-wiredtiger-storage-engine.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Migrate from Built-In Meteor MongoDB to External Server",permalink:"/docs-exp/docs/setup-and-configure/environment-configuration/mongodb-configuration/migrate-from-built-in-meteor-mongodb-to-external-server"},next:{title:"MongoDB Backup and Restore",permalink:"/docs-exp/docs/setup-and-configure/environment-configuration/mongodb-configuration/mongodb-backup-and-restore"}},c={},d=[{value:"Requirements",id:"requirements",level:2},{value:"Quick usage",id:"quick-usage",level:2},{value:"Detailed usage",id:"detailed-usage",level:2}];function l(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"migrate-from-mmap-to-wiredtiger-storage-engine",children:"Migrate from mmap to WiredTiger Storage Engine"}),"\n",(0,r.jsxs)(n.p,{children:["Starting with the major release 4.x of Rocket.Chat, MongoDB has to be set up with a ",(0,r.jsx)(n.a,{href:"https://www.mongodb.com/docs/manual/core/wiredtiger/",children:(0,r.jsx)(n.strong,{children:"WiredTiger"})})," storage engine rather than the deprecated ",(0,r.jsx)(n.em,{children:"mmapv1"})," one. This is mandatory, if you plan to upgrade to one of the future Rocket.Chat versions have to be prepared before initiating the application upgrade."]}),"\n",(0,r.jsxs)(n.p,{children:["This guide helps you migrate your existing ",(0,r.jsx)(n.code,{children:"mmap"})," based MongoDB instance to WiredTiger manually."]}),"\n",(0,r.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["MongoDB instance with ",(0,r.jsx)(n.em,{children:"mmap"})," storage engine."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"quick-usage",children:"Quick usage"}),"\n",(0,r.jsx)(n.p,{children:"Following is an overview of the migration steps:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Stop running Rocket.Chat."}),"\n",(0,r.jsxs)(n.li,{children:["Create a database dump from the ",(0,r.jsx)(n.em,{children:"mmapv1"})," MongoDB (also to have a backup in place)."]}),"\n",(0,r.jsxs)(n.li,{children:["Stop ",(0,r.jsx)(n.em,{children:"mmapv1"})," MongoDB service, drop existing data files, and start up with WiredTiger."]}),"\n",(0,r.jsx)(n.li,{children:"Import the dump into the new WiredTiger MongoDB."}),"\n",(0,r.jsx)(n.li,{children:"Start Rocket.Chat."}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"detailed-usage",children:"Detailed usage"}),"\n",(0,r.jsx)(n.p,{children:"Here are the detailed steps of the migration process:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Stop Rocket.Chat service to ensure a consistent database dump:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"systemctl stop rocketchat\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Create a database dump from the current ",(0,r.jsx)(n.em,{children:"mmapv1"})," MongoDB:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"mongodump --archive=~/mmapdump.gz --gzip\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Stop MongoDB service:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"systemctl stop mongod\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Delete the ",(0,r.jsx)(n.em,{children:"mmapv1"})," based data files of your existing MongoDB:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"rm -rf /var/lib/mongodb/*\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Adjust MongoDB configuration to make use of ",(0,r.jsx)(n.em,{children:"wiredTiger"})," storage engine:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"vi /etc/mongod.conf\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"[...]\nengine: wiredTiger\n[...]\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Start MongoDB service again:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"systemctl start mongod\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"If running with a Replica-Set in your mongo.conf initialize replica set"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"mongo --eval 'rs.initiate()'\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Import dump back into (",(0,r.jsx)(n.em,{children:"wiredTiger"}),") MongoDB:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"mongorestore --drop --archive=~/mmapdump.gz --gzip --noIndexRestore\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Repair databases and rebuild indices:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"mongo --eval 'db.repairDatabase()'\n"})}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Start Rocket.Chat service:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"systemctl start rocketchat\n"})}),"\n"]}),"\n"]})]})}function g(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>s});var r=i(96540);const o={},t=r.createContext(o);function a(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);